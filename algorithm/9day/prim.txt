/*
7 11
1 2 32
1 3 31
1 6 60
1 7 51
2 3 21
3 5 46
3 7 25
4 5 34
4 6 18
5 6 40
5 7 51
*/
#include<stdio.h>
#define MAX 101
#define INF 987654321
int g[MAX][MAX];
int dist[MAX];
int p[MAX];
int visited[MAX];
int queue[MAX*MAX];
int front, rear;
int V, E;
void init() {
	for (int i = 1; i <= V; i++) {
		dist[i] = INF;
		p[i] = 0;
		visited[i] = 1;
	}
}
void prim(int start) {
	init();
	dist[start] = 0;
	int u;
	int min;
//	while (1) {
	for(int i=1; i<V; i++){
		min = INF;
		for (int i = 1; i <= V; i++) {
			if (visited[i] && min > dist[i]) {
				u = i;
				min = dist[i];
			}
		}
		visited[u] = 0;
		for (int j = 1; j <= V; j++) {//µµÂøÁö
			if (visited[j] && dist[j] >g[u][j]) {
				dist[j] = g[u][j];
				p[j] = u;
			}
		}

	}
	printf("idx\t:\t");
	for (int i = 1; i <= V; i++) {
		printf("%d\t", i);
	}
	puts("");
	printf("dist\t:\t");
	for (int i = 1; i <= V; i++) {
		printf("%d\t", dist[i]);
	}
	puts("");
	printf("p\t:\t");
	for (int i = 1; i <= V; i++) {
		printf("%d\t", p[i]);
	}	puts("");

}

int heap[MAX];
int hCnt;
void push(int idx) {
	
	while (idx > 1 && dist[heap[idx]] < dist[heap[idx / 2]]) {
		int t = heap[idx];
		heap[idx] = heap[idx / 2];
		heap[idx / 2] = t;
		idx = idx / 2;
	}
}
int pop() {
	int val = heap[1];
	heap[1] = heap[hCnt--];
	int idx = 1;
	int next;
	while (1) {
		next = idx * 2;
		if (next < hCnt && dist[heap[next]] > dist[heap[next + 1]]) { next++; }
		if (next > hCnt || dist[heap[idx]] < dist[heap[next]]) { break; }
		int t = heap[idx];
		heap[idx] = heap[next];
		heap[next] = t;
		idx = next;
	}

	return val;
}

void prim_heap(int start) {
	for (int i = 1; i <= V; i++) {
		dist[i] = INF;
		p[i] = 0;
		heap[i] = i;
	}
	hCnt = V;
	heap[1] = start;
	heap[start] = 1;
	dist[start] = 0;

	int u;
	
	while (hCnt) {
//	for (int i = 1; i < V; i++) {
		u = pop();
		
		for (int j = 1; j <= hCnt; j++) {//µµÂøÁö
			if (dist[heap[j]] >  g[u][heap[j]]) {
				dist[heap[j]] =  g[u][heap[j]];
				p[heap[j]] = u;
				push(j);
			}
		}

	}
	printf("idx\t:\t");
	for (int i = 1; i <= V; i++) {
		printf("%d\t", i);
	}
	puts("");
	printf("dist\t:\t");
	for (int i = 1; i <= V; i++) {
		printf("%d\t", dist[i]);
	}
	puts("");
	printf("p\t:\t");
	for (int i = 1; i <= V; i++) {
		printf("%d\t", p[i]);
	}	puts("");

}
int main() {
	freopen("input.txt", "r", stdin);
	scanf("%d %d", &V, &E);
	for (int i = 0; i < E; i++) {
		int sn, en, val;
		scanf("%d %d %d", &sn, &en, &val);
		g[sn][en] = g[en][sn] = val;
	}
#if 0
	for (int i = 1; i <= V; i++) {
		for (int j = 1; j <= V; j++) {
			printf("%d ", g[i][j]);
		}
		puts("");
	}
#endif
	for (int i = 1; i <= V; i++) {
		for (int j = 1; j <= V; j++) {
			if (i != j && g[i][j] == 0) {
				g[i][j] = INF;
			}
		}
	}
#if 0
	puts("========");
	for (int i = 1; i <= V; i++) {
		for (int j = 1; j <= V; j++) {
			if (g[i][j] == INF) {
				printf("- ");
			}
			else {
				printf("%d ", g[i][j]);
			}
		}
		puts("");
	}
#endif
	prim(1);
	puts("==========");
	prim_heap(1);
	return 0;
}