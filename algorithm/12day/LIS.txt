#include <stdio.h>
#define NMAX 101
#define NUMMAX 10001
int src[] = { 8,2,4,3,6,11,7,10,14,5 };
int dp[NMAX];
int p[NUMMAX];
int n;
int dpCnt;
int getIdx(int num) {
	if (dpCnt == 0 || dp[0] > num) {
		return 0;
	}
	else if (dp[dpCnt-1] < num) {
		return dpCnt;
	}
	else {
		int s = 0;
		int e = dpCnt - 1;
		int m;
		
		while (s <= e) {
			m = (s + e) / 2;
			if (dp[m] < num) {
				s = m + 1;
			}else if (dp[m] > num) {
				e = m - 1;
			}else {
				return m;
			}
		}
		if (dp[e] < num) {return e + 1;}
		else {return e;}
	}
}
void pathPrint(int num) {
	if (num == -1) {
		return;
	}

	pathPrint(p[num]);
	printf("%d ", num);
}
int main() {
	n = 10;
	int insertIdx;
	for (int i = 0; i < n; i++) {
		insertIdx = getIdx(src[i]);
		dp[insertIdx] = src[i];
		if (insertIdx == dpCnt) {
			dpCnt++;
		}
		p[src[i]] = insertIdx == 0 ? -1 : dp[insertIdx - 1];
	}

	printf("maxCnt : %d\n", dpCnt);
	printf("src : [");
	for (int i = 0; i < n; i++) {
		printf("%d ", src[i]);
	}
	puts("]");

	printf("dp : [");
	for (int i = 0; i < dpCnt; i++) {
		printf("%d ", dp[i]);
	}
	puts("]");
	printf("path : [");
	pathPrint(dp[dpCnt - 1]);
	puts("]");
	return 0;
}
